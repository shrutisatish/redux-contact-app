{"version":3,"sources":["actions/contactAction.js","actions/actionTypes.js","components/ContactItem.js","components/ListLayout.js","components/GridLayout.js","components/main.js","App.js","serviceWorker.js","reducers/index.js","reducers/contactReducer.js","index.js","store/configureStore.js"],"names":["removeContact","id","type","ContactItem","e","index","preventDefault","this","props","style","width","top","marginLeft","className","size","onClick","data","name","email","phone","address","Component","connect","state","ownProps","contacts","dispatch","contactAction","ListLayout","key","GridLayout","Main","handleChange","bind","handleSubmit","handleAddClick","onSelectViewType","showForm","viewType","input","output","replace","match","g1","g2","g3","length","target","formattedPhoneNum","getFormattedPhoneNum","value","setState","nameInput","emailInput","addressInput","contact","createContact","console","log","icon","onSubmit","required","ref","onChange","inputProps","country","map","i","view","App","Boolean","window","location","hostname","combineReducers","action","Object","assign","filter","initialState","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b3aabca.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\n\nexport const createContact = (contact) => {\n    return {\n      type: actionTypes.CREATE_NEW_CONTACT,\n      contact: contact\n    }\n  };\n\nexport const removeContact = (id) => {\n    return {\n      type: actionTypes.REMOVE_CONTACT,\n      id: id\n    }\n  };\n","export const GET_ALL_CONTACTS = 'GET_ALL_CONTACTS';\nexport const CREATE_NEW_CONTACT = 'CREATE_NEW_CONTACT';\nexport const REMOVE_CONTACT = 'REMOVE_CONTACT';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as contactAction from './../actions/contactAction';\nimport { MDBCard, MDBCardTitle, MDBCloseIcon } from 'mdbreact';\n\nclass ContactItem extends Component {\n\n\tremoveContact(e, index){\n\t    e.preventDefault();\n\t    this.props.removeContact(index);\n  \t}\n\n  \trender() {\n\t    return (\n\t       <div>\n\t\t      <MDBCard style={{ width: \"22rem\", top:\"100px\", marginLeft:\"40%\" }}>\n\t\t      \t<MDBCardTitle>\n\t\t      \t\tContact Details for :  <MDBCloseIcon className=\"btn btn-danger\" size=\"5x\" onClick={(e) => this.removeContact(e, this.props.index)}/>\n\t\t      \t</MDBCardTitle>\n\t\t        <MDBCardTitle>{this.props.data.name}</MDBCardTitle>\n\t\t\t        <div>\n\t\t                <i className=\"fas fa-envelope\">  Email</i>\n\t\t            \t<div className=\"text-secondary\">{this.props.data.email}</div>\n\t\t            </div>\n\t\t            <div>\n\t\t                <i className=\"fas fa-mobile-alt\">  Phone</i>\n\t\t                <div className=\"text-secondary\">{this.props.data.phone}</div>\n\t\t            </div>\n\t\t            <div>\n\t\t                <i className=\"fas fa-marker-alt\">Address</i>\n\t\t                <div className=\"text-secondary\">{this.props.data.address}</div>\n\t\t            </div>   \n\t\t      </MDBCard>\n\t      </div>\n\n\t    )\n  \t}\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    contacts: state.contacts\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    removeContact: id => dispatch(contactAction.removeContact(id))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactItem);\n","import React, { Component } from 'react';\nimport ContactItem from './ContactItem';\n\n\nclass ListLayout extends Component {\n  \trender() {\n\t    return (\n\t       <div>\n\t\t     <ContactItem key={this.props.index} data={this.props.data} index={this.props.index}/>\n\t      </div>\n\n\t    )\n  \t}\n}\n\n\n\nexport default ListLayout;\n","import React, { Component } from \"react\";\nimport ContactItem from \"./ContactItem\";\n\nclass GridLayout extends Component {\n\n  render() {\n   return <div>\n     <ContactItem key={this.props.index} data={this.props.data} index={this.props.index}/>\n   </div>\n  }\n}\n\nexport default GridLayout;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as contactAction from './../actions/contactAction';\nimport ListLayout from './ListLayout';\nimport GridLayout from './GridLayout';\n\nimport { MDBIcon } from 'mdbreact';\n\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css'\n\nclass Main extends Component {\n\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleAddClick = this.handleAddClick.bind(this);\n    this.onSelectViewType = this.onSelectViewType.bind(this);\n    this.state = {\n      name: '',\n      phone:'',\n      email:'',\n      address:'',\n      showForm: false,\n      viewType: 'grid'\n    }\n  }\n\n  getFormattedPhoneNum( input ) {\n    let output = \"(\";\n    input.replace( /^\\D*(\\d{0,3})\\D*(\\d{0,3})\\D*(\\d{0,4})/, function( match, g1, g2, g3 )\n        {\n          if ( g1.length ) {\n            output += g1;\n            if ( g1.length === 3 ) {\n                output += \")\";\n                if ( g2.length ) {\n                    output += \" \" + g2; \n                    if ( g2.length === 3 ) {\n                        output += \" - \";\n                        if ( g3.length ) {\n                            output += g3;\n                        }\n                    }\n                }\n             }\n          }\n        }       \n      );        \n    return output;\n   }       \n\n  handleChange(e){\n    e.preventDefault();\n    if(e.target.name === \"phone\"){\n      let formattedPhoneNum = this.getFormattedPhoneNum(e.target.value)\n      this.setState({\n        phone: formattedPhoneNum\n      })\n    }else{\n      this.setState({\n        [e.target.name]: e.target.value\n      })\n    }\n    \n  }\n\n  handleAddClick() {\n    this.setState({\n      showForm: ! this.state.showForm\n    })\n\n  }\n\n  handleSubmit(e){\n      e.preventDefault();\n      if(this.nameInput.value === \"\" || this.emailInput.value === \"\" || this.addressInput.value === \"\") return\n      let contact = {\n        name: this.state.name,\n        phone: this.state.phone,\n        email: this.state.email,\n        address: this.state.address\n      }\n      this.props.createContact(contact);\n      this.nameInput.value = \"\";\n      this.emailInput.value = \"\";\n      this.addressInput.value = \"\";\n  }\n\n  view(data, index){\n    return (\n      <div className={`contact--${this.state.viewType}`}>\n      {(this.state.viewType === 'list') ? \n          (<ListLayout key={data.name+index} data={data} index={index}/>) \n          : \n          (<GridLayout key={data.name+index} data={data} index={index}/>)}\n      </div>\n    )\n  }\n\n  onSelectViewType(e) {\n    console.log(e.target.name)\n    this.setState({\n      viewType: e.target.name\n    })\n  }\n\n  render() {\n    return(\n      <div className='main'>\n          <h1>Contacts Application</h1> \n          { this.state.showForm \n            ? (<MDBIcon icon=\"minus\" onClick={this.handleAddClick} />) \n            : (<MDBIcon icon=\"plus\" onClick={this.handleAddClick} />) \n          }\n          {this.state.showForm ? (<h3>Hide Contact Form</h3>) : (<h3>Show Contact Form</h3>)}\n        {this.state.showForm && (\n         \n          <form onSubmit={this.handleSubmit}>\n            <div className='form'>\n              Name: <input type=\"text\" required ref={(ref) => this.nameInput= ref} onChange={this.handleChange} name=\"name\" />\n              Phone:<div className=\"form__phone\"><PhoneInput\n                      inputProps={{\n                        required: true,\n                      }}\n                      country={'us'}\n                      value={this.state.phone}\n                      onChange={phone => this.setState({ phone })}\n                    /></div>\n              Email: <input type=\"email\" required ref={(ref) => this.emailInput= ref} onChange={this.handleChange} name=\"email\" />\n              Address: <input type=\"text\" required ref={(ref) => this.addressInput= ref} onChange={this.handleChange} name=\"address\" />\n            <input type=\"submit\" />\n            </div>\n            <hr/>\n          </form>\n        \n          )}\n          {this.state.showForm && (<div>\n            <p>Click on a button to choose list view or grid view.</p>\n            <button name=\"list\" className=\"btn\" onClick={this.onSelectViewType}><i className=\"fa fa-bars\"></i> List</button> \n            <button name=\"grid\" className=\"btn\" onClick={this.onSelectViewType}><i className=\"fa fa-th-large\"></i> Grid</button>\n          </div>\n          )}\n\n          <div className={`contact--info--${this.state.viewType}`}>{this.props.contacts.map((contact, i) => this.view(contact, i))}</div>\n        \n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    contacts: state.contacts\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createContact: contact => dispatch(contactAction.createContact(contact)),\n    removeContact: id => dispatch(contactAction.removeContact(id))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n","import React, { Component } from 'react';\nimport Main from './components/main'\nimport './styles/App.scss';\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nexport default class App extends Component {\n\n    render() {\n      return(\n        <div className='App'>\n          <Main/>\n        </div>\n      )\n    }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport contacts from './contactReducer';\n\nexport default combineReducers({\n    contacts: contacts\n});\n","import * as actionTypes from '../actions/actionTypes';\n\nexport default (state = [], action) => {\n    switch (action.type){\n\n      case actionTypes.CREATE_NEW_CONTACT:\n      return [\n        ...state,\n        Object.assign({}, action.contact)\n      ];\n\n      case actionTypes.REMOVE_CONTACT:\n        return state.filter((data, i) => i!== action.id)\n\n      default:\n            return state;\n    }\n  };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from 'redux';\nimport rootReducer from '../reducers';\n\nexport default function configureStore(initialState) {\n    return createStore(rootReducer, initialState);\n}\n"],"sourceRoot":""}